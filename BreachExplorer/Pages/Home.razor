@page "/"

<PageTitle>Home</PageTitle>

@if (!success)
{
    <div id="loadingIndicator" class="justify-content-center d-flex">
        <img src="/images/Loading.gif" alt="Loading..." height="300" width="300" />
        <p>Loading...</p>
    </div>
}
else if (success)
{
    <div style="text-align: center;">
        <h2 class="neon typing-container text-center fs-1 text-uppercase">
            <span class="typing-text">Make sure everyone arround you is safe! </span>
        </h2>
    </div>

    <div class="container-fluid pb-3">
        <div class="row g-3" style="padding-bottom: 10%">

            <div class="col-lg-6 col-12 d-flex justify-content-center">
                <div class="custom-gray-bg border border-secondary rounded-3">
                    <div class="rounded bg-danger bg-gradient bg-opacity-10 d-flex justify-content-center">
                        <a class="style-red-1 text-danger text-nowrap text-decoration-none fw-bold fs-4">Recent data breach</a>
                    </div>
                    <div class="d-grid">
                        <div class="row">
                            <div class="col-lg-3 col-12 d-flex flex-column align-items-center">
                                <img src="@latestBreach.LogoPath" class="img-fluid" style="max-height: 120px; max-width: 100px; width: auto;" />
                                @if (latestBreach.IsVerified)
                                {
                                    <svg version="1.1" baseProfile="basic" id="check" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 64 64" xml:space="preserve" width="100px" height="100px" class="mt-2">
                                    <use xlink:href="/images/Checkmark.svg#checkmark"></use>
                                                                                </svg>
                                    <a class="text-success fs-6 text-center">VERIFIED SOURCE</a>
                                }
                                else
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 48 48" width="100px" height="100px">
                                        <use xlink:href="/images/Cancel.svg#unverified"></use>
                                    </svg>
                                    <a class="text-danger fs-6 text-center">NON-VERIFIED SOURCE</a>
                                }
                            </div>
                            <div class="col-lg-8 col-12">
                                <div class="style-purple-1">Name: <a class="style-purple-1 text-decoration-none" style="color: white">@latestBreach.Name</a></div>
                                <div class="style-purple-1">Domain: <a class="style-purple-1 text-decoration-none" style="color: white">@latestBreach.Domain</a></div>
                                <div class="style-purple-1">Date: <a class="style-purple-1 text-decoration-none" style="color: white">@latestBreach.BreachDate</a></div>
                                <div class="style-purple-1">Data exposed: <a class="style-purple-1 text-decoration-none" style="color: white">@latestBreach.PwnCount</a></div>
                                <div class="description text-center style-purple-1" style="margin-top: 10px;">
                                    <a class="style-purple-1 text-decoration-none" style="color: white;">@((MarkupString)latestBreach.Description)</a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-lg-6 col-12 d-flex">
                <div class="custom-gray-bg border border-secondary rounded-3 bg-image hover-zoom">
                    <div class="rounded bg-danger bg-gradient bg-opacity-10 d-flex justify-content-center text-center">
                        <a class="style-blue-1 text-primary text-decoration-none fw-bold fs-4">Considering changing your password?</a>
                    </div>
                    <div class="rounded border-4 border-dark border" style="margin: 10px;">
                        <form class="bg-info bg-opacity-10 bg-gradient rounded-3 p-3">
                            <div class="text-center mb-3">
                                <div class="rounded d-flex justify-content-center">
                                    <a class="style-purple-1 text-opacity-75 text-white text-nowrap text-decoration-none fw-bold fs-4" style="margin-top: -10px;">Password generator.</a>
                                </div>
                                <label for="customRange3" class="form-label text-white">Length 0-64</label>
                                <div class="range-container" style="position: relative;">
                                    <input type="range" id="customRange3" class="form-range" min="1" max="64" step="1"
                                           @bind="@sliderValue" @oninput="UpdateTooltipValue" />
                                    <span class="tooltip" style="@tooltipStyle">@sliderValue</span>
                                </div>
                            </div>
                            <div class="form-check form-check-inline text-center">
                                <input class="form-check-input" type="checkbox" id="inlineCheckbox1" value="option1" @bind="@optionNumbers">
                                <label class="form-check-label text-white" for="inlineCheckbox1">Include numbers (1,2,3,4,5...)</label>
                            </div>
                            <div class="form-check form-check-inline text-center">
                                <input class="form-check-input" type="checkbox" id="inlineCheckbox2" value="option2" @bind="@optionCharacters">
                                <label class="form-check-label text-white" for="inlineCheckbox2">Include special characters (!.,/#'...)</label>
                            </div>
                            <div class="text-center mt-3">
                                <div class="input-container position-relative">
                                    <input class="form-control mb-2" type="text" placeholder="Generate the password..." readonly @bind="@generatedPassword" id="passwordInput">
                                    <button class="btn copy-btn" type="button" @onclick="CopyTextToClipboard" style="visibility: @copyVisibility">
                                        Copy
                                    </button>
                                    <div class="tooltip-copy @((showTooltip ? "tooltip-visible" : ""))">
                                        Copied!
                                    </div>
                                </div>
                                <button class="btn btn-primary" type="button" @onclick="UpdatePassword">Generate</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <div style="text-align: center;">
                <h2 class="neon typing-container text-center fs-1 text-uppercase">
                    <span class="style-purple-2">Top Data Breaches</span>
                </h2>
            </div>

            <div class="container-fluid">
                <BarChart @ref="barChartTop" style="display: inline-block; width: auto; height: 300px; max-height: 600px; max-width: auto" />
            </div>

            <div class="mt-5 d-flex justify-content-center align-items-center">
                <Button Type="ButtonType.Button" Color="ButtonColor.Primary" Size="ButtonSize.Small" Class="my-1 mx-1" @onclick="async () => await ShowHorizontalBarChartTopAsync()"> Horizontal Line Chart </Button>
                <Button Type="ButtonType.Button" Color="ButtonColor.Primary" Size="ButtonSize.Small" Class="my-1 mx-1" @onclick="async () => await ShowVerticalBarChartTopAsync()"> Vertical Line Chart </Button>
            </div>

            <div style="text-align: center;">
                <h2 class="neon typing-container text-center fs-1 text-uppercase">
                    <span class="style-purple-2">Compare companies</span>
                </h2>
            </div>

            <div class="container-fluid">
                <BarChart @ref="barChartCompare" style="display: inline-block; width: auto; height: 300px; max-height: 600px; max-width: auto" />
            </div>

            <div class="mt-5 d-flex justify-content-center align-items-center">
                <Button Type="ButtonType.Button" Color="ButtonColor.Primary" Size="ButtonSize.Small" Class="my-1 mx-1" @onclick="async () => await ShowHorizontalBarChartCompareAsync()"> Horizontal Bar Chart </Button>
                <Button Type="ButtonType.Button" Color="ButtonColor.Primary" Size="ButtonSize.Small" Class="my-1 mx-1" @onclick="async () => await ShowVerticalBarChartCompareAsync()"> Vertical Bar Chart </Button>
            </div>

            <div class="mt-5 row justify-content-center g-2">
                <div class="col-6 col-sm-4 col-md-auto">
                    <Button Type="ButtonType.Button"
                            Color="ButtonColor.Danger"
                            Size="ButtonSize.Small"
                            Class="w-100"
                            @onclick="async () => await CleanChartDataCompare()">
                        Clean chart
                    </Button>
                </div>

                <div class="col-6 col-sm-4 col-md-auto">
                    <Button Type="ButtonType.Button"
                            Color="ButtonColor.Success"
                            Size="ButtonSize.Small"
                            Class="w-100"
                            @onclick="async () => await RandomChartDataCompare()">
                        Add random companies
                    </Button>
                </div>

                <div class="col-12 col-sm-6 col-md-4">
                    <AutoComplete @bind-Value="@companyName"
                                  Class="w-100"
                                  TItem="Breach"
                                  DataProvider="BreachesDataProvider"
                                  PropertyName="Name"
                                  Placeholder="Search for a company..."
                                  Size="AutoCompleteSize.Small" />
                </div>

                <div class="col-6 col-sm-4 col-md-auto">
                    <Button Type="ButtonType.Button"
                            Color="ButtonColor.Success"
                            Size="ButtonSize.Small"
                            Class="w-100"
                            @onclick="async () => await AddBarChartCompareAsync(companyName)">
                        Add company
                    </Button>
                </div>

                <div class="col-6 col-sm-4 col-md-auto">
                    <Button Type="ButtonType.Button"
                            Color="ButtonColor.Danger"
                            Size="ButtonSize.Small"
                            Class="w-100"
                            @onclick="async () => await RemoveBarChartCompareAsync(companyName)">
                        Remove company
                    </Button>
                </div>
            </div>

        </div>
    </div>
}
else
{
    <div class="error-message">
        <p>Error: @errormessage</p>
    </div>
}


@code {
    private bool success;
    private string? errormessage;
    private List<string> colorPalette = new List<string> { "#A40C0C", "#9E0B15", "#990A1E", "#930927", "#8E0931", "#88083A", "#830743", "#7D064C", "#770555", "#72045E", "#6C0367", "#670371", "#61027A", "#5C0183", "#56008C" };

    protected override async Task OnInitializedAsync()
    {
        await GetBreachAsync();
        await GetBreachesAsync();
        StateHasChanged();
        await InitializeChartDataTop();
        await InitializeChartDataCompare();
    }

    //LatestBreach HaveIBeenPwned API V3
    private Breach latestBreach;
    private List<Breach> breachesList = new List<Breach>() { };

    private async Task GetBreachAsync()
    {
        try
        {
            string uri = "https://haveibeenpwned.com/api/v3/latestbreach";
            latestBreach = await Http.GetFromJsonAsync<Breach>(uri);
            success = true;
            errormessage = String.Empty;
        }
        catch (Exception e)
        {
            success = false;
            errormessage = e.Message;
        }
    }

    //All Breaches HaveIBeenPwned API V3
    private async Task GetBreachesAsync()
    {
        try
        {
            string uri = "https://haveibeenpwned.com/api/v3/breaches";
            breachesList = await Http.GetFromJsonAsync<List<Breach>>(uri);
            success = true;
            errormessage = String.Empty;
        }
        catch (Exception e)
        {
            success = false;
            errormessage = e.Message;
        }
    }

    public class Breach
    {
        public string? Name { get; set; }
        public string? Title { get; set; }
        public string? Domain { get; set; }
        public string? BreachDate { get; set; }
        public DateTime AddedDate { get; set; }
        public DateTime ModifiedDate { get; set; }
        public int PwnCount { get; set; }
        public string? Description { get; set; }
        public string? LogoPath { get; set; }
        public List<string>? DataClasses { get; set; }
        public bool IsVerified { get; set; }
        public bool IsFabricated { get; set; }
        public bool IsSensitive { get; set; }
        public bool IsRetired { get; set; }
        public bool IsSpamList { get; set; }
        public bool IsMalware { get; set; }
        public bool IsSubscriptionFree { get; set; }
    }

    //PasswordGenerator API-ninjas
    private Password? password;
    private string? generatedPassword;
    private string copyVisibility = "hidden";
    private bool optionNumbers = true;
    private bool optionCharacters = true;

    private async Task GetPasswordAsync()
    {
        // 1️⃣ build URI exactly as before
        string uri =
            "https://api.api-ninjas.com/v1/passwordgenerator?length="
            + sliderValue
            + "&exclude_numbers=" + !optionNumbers
            + "&exclude_special_chars=" + !optionCharacters
            + "&x-api-key=begzyjsaHViKlIBMrIe5Cw==jySMQEZIfBStoL4n";

        try
        {
            var response = await Http.GetAsync(uri);
            var body = await response.Content.ReadAsStringAsync();

            if (!response.IsSuccessStatusCode)
            {
                string msg;
                try
                {
                    using var doc = JsonDocument.Parse(body);
                    msg = doc.RootElement.GetProperty("error").GetString() ?? body;
                }
                catch
                {
                    msg = body;
                }

                errormessage = msg;

                ToastService.Notify(new(
                  ToastType.Warning,
                  msg
                ));

                return;
            }

            password = JsonSerializer.Deserialize<Password>(body);
            errormessage = String.Empty;
            generatedPassword = password!.random_password;
            copyVisibility = "visible;";
        }
        catch (Exception e)
        {
            ToastService.Notify(new(
            ToastType.Danger,
            $"Error generating password: {e.Message}"
            ));
        }
    }

    public class Password
    {
        public string? random_password { get; set; }
    }

    public async Task UpdatePassword()
    {
        await GetPasswordAsync();
        StateHasChanged();
    }

    //ToolTip for slider
    private int sliderValue = 16;
    private bool showTooltip = false;
    private string tooltipStyle = $"left: 25%; visibility: visible;";

    private void UpdateTooltipValue(ChangeEventArgs e)
    {
        sliderValue = int.Parse(e.Value.ToString());
        var rangeInput = 64;
        var percentage = (sliderValue / (float)rangeInput) * 100;
        tooltipStyle = $"left: calc({percentage}%); visibility: visible;";
    }

    //Copy-button to clipboard
    private async Task CopyTextToClipboard()
    {
        if (!string.IsNullOrWhiteSpace(generatedPassword))
        {
            await JS.InvokeVoidAsync("copyToClipboard", generatedPassword);
            showTooltip = true;
            StateHasChanged();
            await Task.Delay(4000);
            showTooltip = false;
            StateHasChanged();
        }
    }

    //BarChartTop
    private BarChart barChartTop = default!;
    private BarChartOptions barChartOptionsTop = default!;
    private ChartData chartDataTop = default!;

    private List<string?> GetLabelsTop()
    {
        var topBreaches = breachesList.OrderByDescending(b => b.PwnCount).Take(15).ToList();
        return topBreaches.Select(b => b.Name).ToList();
    }

    private List<double?> GetDataTop()
    {
        var topBreaches = breachesList.OrderByDescending(b => b.PwnCount).Take(15).ToList();
        return topBreaches.Select(b => (double?)b.PwnCount).ToList();
    }

    private async Task InitializeChartDataTop()
    {
        chartDataTop = new ChartData
        {
            Labels = GetLabelsTop(),
            Datasets = new List<IChartDataset>
            {

                    new BarChartDataset()
                    {
                        Label = "Data exposed: ",
                        Data = GetDataTop(),
                        BackgroundColor = colorPalette,
                        CategoryPercentage = 0.9,
                        BarPercentage = 1,

                    }
                }
        };

        barChartOptionsTop = new();

        barChartOptionsTop.Responsive = true;
        barChartOptionsTop.Scales.X!.Title = new ChartAxesTitle { Text = "Data Exposed", Display = true, Color = "blueviolet" };
        barChartOptionsTop.Scales.Y!.Title = new ChartAxesTitle { Text = "Company Names", Display = true, Color = "blueviolet" };
        barChartOptionsTop.Scales.X!.Ticks = new ChartAxesTicks { Color = "white" };
        barChartOptionsTop.Scales.Y!.Ticks = new ChartAxesTicks { Color = "red" };
        barChartOptionsTop.Plugins.Legend.Display = false;
        barChartOptionsTop.Interaction = new Interaction { Mode = InteractionMode.Index };
        barChartOptionsTop.IndexAxis = "y";

        await barChartTop.InitializeAsync(chartDataTop, barChartOptionsTop);
    }

    protected async Task ShowHorizontalBarChartTopAsync()
    {
        barChartOptionsTop.IndexAxis = "y";
        barChartOptionsTop.Scales.X!.Title = new ChartAxesTitle { Text = "Data Exposed", Display = true, Color = "blueviolet" };
        barChartOptionsTop.Scales.Y!.Title = new ChartAxesTitle { Text = "Company Names", Display = true, Color = "blueviolet" };
        barChartOptionsTop.Scales.X!.Ticks = new ChartAxesTicks { Color = "white" };
        barChartOptionsTop.Scales.Y!.Ticks = new ChartAxesTicks { Color = "red" };
        await barChartTop.UpdateAsync(chartDataTop, barChartOptionsTop);
    }

    protected async Task ShowVerticalBarChartTopAsync()
    {
        barChartOptionsTop.IndexAxis = "x";
        barChartOptionsTop.Scales.X!.Title = new ChartAxesTitle { Text = "Company Names", Display = true, Color = "blueviolet" };
        barChartOptionsTop.Scales.Y!.Title = new ChartAxesTitle { Text = "Data Exposed", Display = true, Color = "blueviolet" };
        barChartOptionsTop.Scales.X!.Ticks = new ChartAxesTicks { Color = "red" };
        barChartOptionsTop.Scales.Y!.Ticks = new ChartAxesTicks { Color = "white" };
        await barChartTop.UpdateAsync(chartDataTop, barChartOptionsTop);
    }

    //BarChartCompare
    [Inject] protected ToastService ToastService { get; set; } = default!;
    private string? companyName;
    private BarChart barChartCompare = default!;
    private BarChartOptions barChartOptionsCompare = default!;
    private ChartData chartDataCompare = default!;
    private List<Breach>? breachData = new List<Breach>();

    private List<string?> GetLabelsCompare(List<Breach> data)
    {
        var selectedBreaches = data.OrderByDescending(b => b.PwnCount).ToList();
        return selectedBreaches.Select(b => (string?)b.Name).ToList();
    }

    private List<double?> GetDataCompare(List<Breach> data)
    {
        var selectedBreaches = data.OrderByDescending(b => b.PwnCount).ToList();
        return selectedBreaches.Select(b => (double?)b.PwnCount).ToList();
    }

    protected async Task AddBarChartCompareAsync(string querry)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(companyName))
            {
                ToastService.Notify(new(ToastType.Info, "Please specify the company name."));
            }
            else
            {

                if (breachData.Count == 15)
                {
                    ToastService.Notify(new(ToastType.Danger, "Maximum of 15 companies allowed, please remove some companies from the chart."));
                }
                else
                {
                    var temp = breachesList.Where(breach => breach.Name?.ToUpper() == querry?.ToUpper()).ToList();

                    if (temp.Count <= 0)
                    {
                        ToastService.Notify(new(ToastType.Warning, "Company not found in the database."));
                    }
                    else
                    {
                        foreach (var breach in temp)
                        {
                            breachData.Add(breach);
                        }

                        chartDataCompare = new ChartData
                        {
                            Labels = GetLabelsCompare(breachData),
                            Datasets = new List<IChartDataset>
            {

                    new BarChartDataset()
                    {
                        Label = "Data exposed: ",
                        Data = GetDataCompare(breachData),
                        BackgroundColor = colorPalette,
                        CategoryPercentage = 0.9,
                        BarPercentage = 1,

                    }
                }
                        };
                        await barChartCompare.UpdateAsync(chartDataCompare, barChartOptionsCompare);
                    }
                }
            }
        }
        catch (Exception e)
        {
            ToastService.Notify(new(ToastType.Danger, e.Message));
        }
    }

    protected async Task RemoveBarChartCompareAsync(string? querry)
    {
        if (string.IsNullOrWhiteSpace(companyName))
        {
            ToastService.Notify(new(ToastType.Info, "Please specify the company name to remove."));
        }
        else
        {
            var temp = breachData.Where(breach => breach.Name?.ToUpper() == querry?.ToUpper()).ToList();

            if (temp.Count <= 0)
            {
                ToastService.Notify(new(ToastType.Warning, "No such company on the chart."));
            }
            else
            {
                breachData.Remove(temp[0]);

                chartDataCompare = new ChartData
                {
                    Labels = GetLabelsCompare(breachData),
                    Datasets = new List<IChartDataset>
            {

                    new BarChartDataset()
                    {
                        Label = "Data exposed: ",
                        Data = GetDataCompare(breachData),
                        BackgroundColor = colorPalette,
                        CategoryPercentage = 0.9,
                        BarPercentage = 1,

                    }
                }
                };
                await barChartCompare.UpdateAsync(chartDataCompare, barChartOptionsCompare);
            }
        }
    }

    private async Task CleanChartDataCompare()
    {
        breachData = new List<Breach>();
        chartDataCompare = new ChartData
        {
            Labels = { },
            Datasets = new List<IChartDataset>
            {

                    new BarChartDataset()
                    {
                        Label = "Data exposed: ",
                        Data = { },
                        BackgroundColor = colorPalette,
                        CategoryPercentage = 0.9,
                        BarPercentage = 1,

                    }
                }
        };
        await barChartCompare.UpdateAsync(chartDataCompare, barChartOptionsCompare);
    }

    private async Task RandomChartDataCompare()
    {
        var random = new Random();
        breachData = breachesList.Where(breach => breach.PwnCount > 5000000).OrderBy(b => random.Next()).Take(15).ToList();

        chartDataCompare = new ChartData
        {
            Labels = GetLabelsCompare(breachData),
            Datasets = new List<IChartDataset>
            {

                    new BarChartDataset()
                    {
                        Label = "Data exposed: ",
                        Data = GetDataCompare(breachData),
                        BackgroundColor = colorPalette,
                        CategoryPercentage = 0.9,
                        BarPercentage = 1,

                    }
                }
        };
        await barChartCompare.UpdateAsync(chartDataCompare, barChartOptionsCompare);
    }

    private async Task InitializeChartDataCompare()
    {
        chartDataCompare = new ChartData
        {
            Labels = { },
            Datasets = new List<IChartDataset>
            {

                    new BarChartDataset()
                    {
                        Label = "Data exposed: ",
                        Data = { },
                        BackgroundColor = colorPalette,
                        CategoryPercentage = 0.9,
                        BarPercentage = 1,

                    }
                }
        };

        barChartOptionsCompare = new();

        barChartOptionsCompare.Responsive = true;
        barChartOptionsCompare.Scales.X!.Title = new ChartAxesTitle { Text = "Data Exposed", Display = true, Color = "blueviolet" };
        barChartOptionsCompare.Scales.Y!.Title = new ChartAxesTitle { Text = "Company Names", Display = true, Color = "blueviolet" };
        barChartOptionsCompare.Scales.X!.Ticks = new ChartAxesTicks { Color = "white" };
        barChartOptionsCompare.Scales.Y!.Ticks = new ChartAxesTicks { Color = "red" };
        barChartOptionsCompare.Plugins.Legend.Display = false;
        barChartOptionsCompare.Interaction = new Interaction { Mode = InteractionMode.Index };
        barChartOptionsCompare.IndexAxis = "y";

        await barChartCompare.InitializeAsync(chartDataCompare, barChartOptionsCompare);
    }

    protected async Task ShowHorizontalBarChartCompareAsync()
    {
        barChartOptionsCompare.IndexAxis = "y";
        barChartOptionsCompare.Scales.X!.Title = new ChartAxesTitle { Text = "Data Exposed", Display = true, Color = "blueviolet" };
        barChartOptionsCompare.Scales.Y!.Title = new ChartAxesTitle { Text = "Company Names", Display = true, Color = "blueviolet" };
        barChartOptionsCompare.Scales.X!.Ticks = new ChartAxesTicks { Color = "white" };
        barChartOptionsCompare.Scales.Y!.Ticks = new ChartAxesTicks { Color = "red" };
        await barChartCompare.UpdateAsync(chartDataCompare, barChartOptionsCompare);
    }

    protected async Task ShowVerticalBarChartCompareAsync()
    {
        barChartOptionsCompare.IndexAxis = "x";
        barChartOptionsCompare.Scales.X!.Title = new ChartAxesTitle { Text = "Company Names", Display = true, Color = "blueviolet" };
        barChartOptionsCompare.Scales.Y!.Title = new ChartAxesTitle { Text = "Data Exposed", Display = true, Color = "blueviolet" };
        barChartOptionsCompare.Scales.X!.Ticks = new ChartAxesTicks { Color = "red" };
        barChartOptionsCompare.Scales.Y!.Ticks = new ChartAxesTicks { Color = "white" };
        await barChartCompare.UpdateAsync(chartDataCompare, barChartOptionsCompare);
    }

    //AutoComplete logic
    private async Task<AutoCompleteDataProviderResult<Breach>> BreachesDataProvider(AutoCompleteDataProviderRequest<Breach> request)
    {
        return await Task.FromResult(request.ApplyTo(breachesList.OrderBy(b => b.Name)));
    }
}